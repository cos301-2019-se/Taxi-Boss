"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Google Partners API
 *
 * Searches certified companies and creates contact leads with them, and also
 * audits the usage of clients.
 *
 * @example
 * const google = require('googleapis');
 * const partners = google.partners('v2');
 *
 * @namespace partners
 * @type {Function}
 * @version v2
 * @variation v2
 * @param {object=} options Options for Partners
 */
var Partners = /** @class */ (function () {
    function Partners(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.analytics = new Resource$Analytics(this);
        this.clientMessages = new Resource$Clientmessages(this);
        this.companies = new Resource$Companies(this);
        this.leads = new Resource$Leads(this);
        this.offers = new Resource$Offers(this);
        this.userEvents = new Resource$Userevents(this);
        this.users = new Resource$Users(this);
        this.userStates = new Resource$Userstates(this);
        this.v2 = new Resource$V2(this);
    }
    Partners.prototype.getRoot = function () {
        return this.root;
    };
    return Partners;
}());
exports.Partners = Partners;
var Resource$Analytics = /** @class */ (function () {
    function Resource$Analytics(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Analytics.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Analytics.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/analytics').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Analytics;
}());
exports.Resource$Analytics = Resource$Analytics;
var Resource$Clientmessages = /** @class */ (function () {
    function Resource$Clientmessages(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Clientmessages.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Clientmessages.prototype.log = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/clientMessages:log')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Clientmessages;
}());
exports.Resource$Clientmessages = Resource$Clientmessages;
var Resource$Companies = /** @class */ (function () {
    function Resource$Companies(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.leads = new Resource$Companies$Leads(root);
    }
    Resource$Companies.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Companies.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/companies/{companyId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['companyId'],
            pathParams: ['companyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Companies.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/companies').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Companies;
}());
exports.Resource$Companies = Resource$Companies;
var Resource$Companies$Leads = /** @class */ (function () {
    function Resource$Companies$Leads(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Companies$Leads.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Companies$Leads.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/companies/{companyId}/leads')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['companyId'],
            pathParams: ['companyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Companies$Leads;
}());
exports.Resource$Companies$Leads = Resource$Companies$Leads;
var Resource$Leads = /** @class */ (function () {
    function Resource$Leads(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Leads.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Leads.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/leads').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Leads;
}());
exports.Resource$Leads = Resource$Leads;
var Resource$Offers = /** @class */ (function () {
    function Resource$Offers(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.history = new Resource$Offers$History(root);
    }
    Resource$Offers.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Offers.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/offers').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Offers;
}());
exports.Resource$Offers = Resource$Offers;
var Resource$Offers$History = /** @class */ (function () {
    function Resource$Offers$History(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Offers$History.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Offers$History.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/offers/history').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Offers$History;
}());
exports.Resource$Offers$History = Resource$Offers$History;
var Resource$Userevents = /** @class */ (function () {
    function Resource$Userevents(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Userevents.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Userevents.prototype.log = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/userEvents:log').replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Userevents;
}());
exports.Resource$Userevents = Resource$Userevents;
var Resource$Users = /** @class */ (function () {
    function Resource$Users(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Users.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Users.prototype.createCompanyRelation = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/users/{userId}/companyRelation')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['userId'],
            pathParams: ['userId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Users.prototype.deleteCompanyRelation = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/users/{userId}/companyRelation')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['userId'],
            pathParams: ['userId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Users.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/users/{userId}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['userId'],
            pathParams: ['userId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Users.prototype.updateProfile = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/users/profile').replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Users;
}());
exports.Resource$Users = Resource$Users;
var Resource$Userstates = /** @class */ (function () {
    function Resource$Userstates(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Userstates.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Userstates.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/userStates').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Userstates;
}());
exports.Resource$Userstates = Resource$Userstates;
var Resource$V2 = /** @class */ (function () {
    function Resource$V2(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$V2.prototype.getRoot = function () {
        return this.root;
    };
    Resource$V2.prototype.getPartnersstatus = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/partnersstatus').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$V2.prototype.updateCompanies = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/companies').replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$V2.prototype.updateLeads = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2/leads').replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$V2;
}());
exports.Resource$V2 = Resource$V2;
//# sourceMappingURL=v2.js.map
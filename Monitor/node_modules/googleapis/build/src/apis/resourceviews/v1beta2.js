"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Google Compute Engine Instance Groups API
 *
 * The Resource View API allows users to create and manage logical sets of
 * Google Compute Engine instances.
 *
 * @example
 * const google = require('googleapis');
 * const resourceviews = google.resourceviews('v1beta2');
 *
 * @namespace resourceviews
 * @type {Function}
 * @version v1beta2
 * @variation v1beta2
 * @param {object=} options Options for Resourceviews
 */
var Resourceviews = /** @class */ (function () {
    function Resourceviews(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.zoneOperations = new Resource$Zoneoperations(this);
        this.zoneViews = new Resource$Zoneviews(this);
    }
    Resourceviews.prototype.getRoot = function () {
        return this.root;
    };
    return Resourceviews;
}());
exports.Resourceviews = Resourceviews;
var Resource$Zoneoperations = /** @class */ (function () {
    function Resource$Zoneoperations(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Zoneoperations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Zoneoperations.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/resourceviews/v1beta2/projects/{project}/zones/{zone}/operations/{operation}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['project', 'zone', 'operation'],
            pathParams: ['operation', 'project', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Zoneoperations.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/resourceviews/v1beta2/projects/{project}/zones/{zone}/operations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['project', 'zone'],
            pathParams: ['project', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Zoneoperations;
}());
exports.Resource$Zoneoperations = Resource$Zoneoperations;
var Resource$Zoneviews = /** @class */ (function () {
    function Resource$Zoneviews(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Zoneviews.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Zoneviews.prototype.addResources = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/resourceviews/v1beta2/projects/{project}/zones/{zone}/resourceViews/{resourceView}/addResources')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['project', 'zone', 'resourceView'],
            pathParams: ['project', 'resourceView', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Zoneviews.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/resourceviews/v1beta2/projects/{project}/zones/{zone}/resourceViews/{resourceView}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['project', 'zone', 'resourceView'],
            pathParams: ['project', 'resourceView', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Zoneviews.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/resourceviews/v1beta2/projects/{project}/zones/{zone}/resourceViews/{resourceView}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['project', 'zone', 'resourceView'],
            pathParams: ['project', 'resourceView', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Zoneviews.prototype.getService = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/resourceviews/v1beta2/projects/{project}/zones/{zone}/resourceViews/{resourceView}/getService')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['project', 'zone', 'resourceView'],
            pathParams: ['project', 'resourceView', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Zoneviews.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/resourceviews/v1beta2/projects/{project}/zones/{zone}/resourceViews')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['project', 'zone'],
            pathParams: ['project', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Zoneviews.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/resourceviews/v1beta2/projects/{project}/zones/{zone}/resourceViews')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['project', 'zone'],
            pathParams: ['project', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Zoneviews.prototype.listResources = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/resourceviews/v1beta2/projects/{project}/zones/{zone}/resourceViews/{resourceView}/resources')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['project', 'zone', 'resourceView'],
            pathParams: ['project', 'resourceView', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Zoneviews.prototype.removeResources = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/resourceviews/v1beta2/projects/{project}/zones/{zone}/resourceViews/{resourceView}/removeResources')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['project', 'zone', 'resourceView'],
            pathParams: ['project', 'resourceView', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Zoneviews.prototype.setService = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/resourceviews/v1beta2/projects/{project}/zones/{zone}/resourceViews/{resourceView}/setService')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['project', 'zone', 'resourceView'],
            pathParams: ['project', 'resourceView', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Zoneviews;
}());
exports.Resource$Zoneviews = Resource$Zoneviews;
//# sourceMappingURL=v1beta2.js.map
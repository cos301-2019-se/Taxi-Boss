"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Admin Reports API
 *
 * Fetches reports for the administrators of G Suite customers about the usage,
 * collaboration, security, and risk for their users.
 *
 * @example
 * const google = require('googleapis');
 * const admin = google.admin('reports_v1');
 *
 * @namespace admin
 * @type {Function}
 * @version reports_v1
 * @variation reports_v1
 * @param {object=} options Options for Admin
 */
var Admin = /** @class */ (function () {
    function Admin(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.activities = new Resource$Activities(this);
        this.channels = new Resource$Channels(this);
        this.customerUsageReports = new Resource$Customerusagereports(this);
        this.entityUsageReports = new Resource$Entityusagereports(this);
        this.userUsageReport = new Resource$Userusagereport(this);
    }
    Admin.prototype.getRoot = function () {
        return this.root;
    };
    return Admin;
}());
exports.Admin = Admin;
var Resource$Activities = /** @class */ (function () {
    function Resource$Activities(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Activities.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Activities.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/admin/reports/v1/activity/users/{userKey}/applications/{applicationName}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['userKey', 'applicationName'],
            pathParams: ['applicationName', 'userKey'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Activities.prototype.watch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/admin/reports/v1/activity/users/{userKey}/applications/{applicationName}/watch')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['userKey', 'applicationName'],
            pathParams: ['applicationName', 'userKey'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Activities;
}());
exports.Resource$Activities = Resource$Activities;
var Resource$Channels = /** @class */ (function () {
    function Resource$Channels(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Channels.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Channels.prototype.stop = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/admin/reports/v1/admin/reports_v1/channels/stop')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Channels;
}());
exports.Resource$Channels = Resource$Channels;
var Resource$Customerusagereports = /** @class */ (function () {
    function Resource$Customerusagereports(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Customerusagereports.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Customerusagereports.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/admin/reports/v1/usage/dates/{date}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['date'],
            pathParams: ['date'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Customerusagereports;
}());
exports.Resource$Customerusagereports = Resource$Customerusagereports;
var Resource$Entityusagereports = /** @class */ (function () {
    function Resource$Entityusagereports(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Entityusagereports.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Entityusagereports.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/admin/reports/v1/usage/{entityType}/{entityKey}/dates/{date}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['entityType', 'entityKey', 'date'],
            pathParams: ['date', 'entityKey', 'entityType'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Entityusagereports;
}());
exports.Resource$Entityusagereports = Resource$Entityusagereports;
var Resource$Userusagereport = /** @class */ (function () {
    function Resource$Userusagereport(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Userusagereport.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Userusagereport.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/admin/reports/v1/usage/users/{userKey}/dates/{date}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['userKey', 'date'],
            pathParams: ['date', 'userKey'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Userusagereport;
}());
exports.Resource$Userusagereport = Resource$Userusagereport;
//# sourceMappingURL=reports_v1.js.map
"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Google Analytics API
 *
 * Views and manages your Google Analytics data.
 *
 * @example
 * const google = require('googleapis');
 * const analytics = google.analytics('v3');
 *
 * @namespace analytics
 * @type {Function}
 * @version v3
 * @variation v3
 * @param {object=} options Options for Analytics
 */
var Analytics = /** @class */ (function () {
    function Analytics(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.data = new Resource$Data(this);
        this.management = new Resource$Management(this);
        this.metadata = new Resource$Metadata(this);
        this.provisioning = new Resource$Provisioning(this);
    }
    Analytics.prototype.getRoot = function () {
        return this.root;
    };
    return Analytics;
}());
exports.Analytics = Analytics;
var Resource$Data = /** @class */ (function () {
    function Resource$Data(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.ga = new Resource$Data$Ga(root);
        this.mcf = new Resource$Data$Mcf(root);
        this.realtime = new Resource$Data$Realtime(root);
    }
    Resource$Data.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Data;
}());
exports.Resource$Data = Resource$Data;
var Resource$Data$Ga = /** @class */ (function () {
    function Resource$Data$Ga(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Data$Ga.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Data$Ga.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/analytics/v3/data/ga')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['ids', 'start-date', 'end-date', 'metrics'],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Data$Ga;
}());
exports.Resource$Data$Ga = Resource$Data$Ga;
var Resource$Data$Mcf = /** @class */ (function () {
    function Resource$Data$Mcf(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Data$Mcf.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Data$Mcf.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/analytics/v3/data/mcf')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['ids', 'start-date', 'end-date', 'metrics'],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Data$Mcf;
}());
exports.Resource$Data$Mcf = Resource$Data$Mcf;
var Resource$Data$Realtime = /** @class */ (function () {
    function Resource$Data$Realtime(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Data$Realtime.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Data$Realtime.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/analytics/v3/data/realtime')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['ids', 'metrics'],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Data$Realtime;
}());
exports.Resource$Data$Realtime = Resource$Data$Realtime;
var Resource$Management = /** @class */ (function () {
    function Resource$Management(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.accounts = new Resource$Management$Accounts(root);
        this.accountSummaries = new Resource$Management$Accountsummaries(root);
        this.accountUserLinks = new Resource$Management$Accountuserlinks(root);
        this.customDataSources = new Resource$Management$Customdatasources(root);
        this.customDimensions = new Resource$Management$Customdimensions(root);
        this.customMetrics = new Resource$Management$Custommetrics(root);
        this.experiments = new Resource$Management$Experiments(root);
        this.filters = new Resource$Management$Filters(root);
        this.goals = new Resource$Management$Goals(root);
        this.profileFilterLinks = new Resource$Management$Profilefilterlinks(root);
        this.profiles = new Resource$Management$Profiles(root);
        this.profileUserLinks = new Resource$Management$Profileuserlinks(root);
        this.remarketingAudience =
            new Resource$Management$Remarketingaudience(root);
        this.segments = new Resource$Management$Segments(root);
        this.unsampledReports = new Resource$Management$Unsampledreports(root);
        this.uploads = new Resource$Management$Uploads(root);
        this.webproperties = new Resource$Management$Webproperties(root);
        this.webPropertyAdWordsLinks =
            new Resource$Management$Webpropertyadwordslinks(root);
        this.webpropertyUserLinks =
            new Resource$Management$Webpropertyuserlinks(root);
    }
    Resource$Management.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Management;
}());
exports.Resource$Management = Resource$Management;
var Resource$Management$Accounts = /** @class */ (function () {
    function Resource$Management$Accounts(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Accounts.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Accounts.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/analytics/v3/management/accounts')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Accounts;
}());
exports.Resource$Management$Accounts = Resource$Management$Accounts;
var Resource$Management$Accountsummaries = /** @class */ (function () {
    function Resource$Management$Accountsummaries(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Accountsummaries.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Accountsummaries.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/analytics/v3/management/accountSummaries')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Accountsummaries;
}());
exports.Resource$Management$Accountsummaries = Resource$Management$Accountsummaries;
var Resource$Management$Accountuserlinks = /** @class */ (function () {
    function Resource$Management$Accountuserlinks(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Accountuserlinks.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Accountuserlinks.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/entityUserLinks/{linkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['accountId', 'linkId'],
            pathParams: ['accountId', 'linkId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Accountuserlinks.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/entityUserLinks')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId'],
            pathParams: ['accountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Accountuserlinks.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/entityUserLinks')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId'],
            pathParams: ['accountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Accountuserlinks.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/entityUserLinks/{linkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'linkId'],
            pathParams: ['accountId', 'linkId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Accountuserlinks;
}());
exports.Resource$Management$Accountuserlinks = Resource$Management$Accountuserlinks;
var Resource$Management$Customdatasources = /** @class */ (function () {
    function Resource$Management$Customdatasources(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Customdatasources.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Customdatasources.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Customdatasources;
}());
exports.Resource$Management$Customdatasources = Resource$Management$Customdatasources;
var Resource$Management$Customdimensions = /** @class */ (function () {
    function Resource$Management$Customdimensions(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Customdimensions.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Customdimensions.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],
            pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Customdimensions.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Customdimensions.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Customdimensions.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],
            pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Customdimensions.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],
            pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Customdimensions;
}());
exports.Resource$Management$Customdimensions = Resource$Management$Customdimensions;
var Resource$Management$Custommetrics = /** @class */ (function () {
    function Resource$Management$Custommetrics(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Custommetrics.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Custommetrics.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],
            pathParams: ['accountId', 'customMetricId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Custommetrics.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Custommetrics.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Custommetrics.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],
            pathParams: ['accountId', 'customMetricId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Custommetrics.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],
            pathParams: ['accountId', 'customMetricId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Custommetrics;
}());
exports.Resource$Management$Custommetrics = Resource$Management$Custommetrics;
var Resource$Management$Experiments = /** @class */ (function () {
    function Resource$Management$Experiments(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Experiments.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Experiments.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],
            pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Experiments.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],
            pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Experiments.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Experiments.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Experiments.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],
            pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Experiments.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],
            pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Experiments;
}());
exports.Resource$Management$Experiments = Resource$Management$Experiments;
var Resource$Management$Filters = /** @class */ (function () {
    function Resource$Management$Filters(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Filters.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Filters.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/filters/{filterId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['accountId', 'filterId'],
            pathParams: ['accountId', 'filterId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Filters.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/filters/{filterId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'filterId'],
            pathParams: ['accountId', 'filterId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Filters.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/filters')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId'],
            pathParams: ['accountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Filters.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/filters')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId'],
            pathParams: ['accountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Filters.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/filters/{filterId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['accountId', 'filterId'],
            pathParams: ['accountId', 'filterId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Filters.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/filters/{filterId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'filterId'],
            pathParams: ['accountId', 'filterId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Filters;
}());
exports.Resource$Management$Filters = Resource$Management$Filters;
var Resource$Management$Goals = /** @class */ (function () {
    function Resource$Management$Goals(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Goals.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Goals.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],
            pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Goals.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Goals.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Goals.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],
            pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Goals.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],
            pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Goals;
}());
exports.Resource$Management$Goals = Resource$Management$Goals;
var Resource$Management$Profilefilterlinks = /** @class */ (function () {
    function Resource$Management$Profilefilterlinks(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Profilefilterlinks.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Profilefilterlinks.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],
            pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profilefilterlinks.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],
            pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profilefilterlinks.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profilefilterlinks.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profilefilterlinks.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],
            pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profilefilterlinks.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],
            pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Profilefilterlinks;
}());
exports.Resource$Management$Profilefilterlinks = Resource$Management$Profilefilterlinks;
var Resource$Management$Profiles = /** @class */ (function () {
    function Resource$Management$Profiles(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Profiles.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Profiles.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profiles.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profiles.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profiles.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profiles.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profiles.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Profiles;
}());
exports.Resource$Management$Profiles = Resource$Management$Profiles;
var Resource$Management$Profileuserlinks = /** @class */ (function () {
    function Resource$Management$Profileuserlinks(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Profileuserlinks.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Profileuserlinks.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],
            pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profileuserlinks.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profileuserlinks.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Profileuserlinks.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],
            pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Profileuserlinks;
}());
exports.Resource$Management$Profileuserlinks = Resource$Management$Profileuserlinks;
var Resource$Management$Remarketingaudience = /** @class */ (function () {
    function Resource$Management$Remarketingaudience(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Remarketingaudience.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Remarketingaudience.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],
            pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Remarketingaudience.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],
            pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Remarketingaudience.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Remarketingaudience.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Remarketingaudience.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],
            pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Remarketingaudience.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],
            pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Remarketingaudience;
}());
exports.Resource$Management$Remarketingaudience = Resource$Management$Remarketingaudience;
var Resource$Management$Segments = /** @class */ (function () {
    function Resource$Management$Segments(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Segments.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Segments.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/analytics/v3/management/segments')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Segments;
}());
exports.Resource$Management$Segments = Resource$Management$Segments;
var Resource$Management$Unsampledreports = /** @class */ (function () {
    function Resource$Management$Unsampledreports(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Unsampledreports.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Unsampledreports.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'unsampledReportId'],
            pathParams: ['accountId', 'profileId', 'unsampledReportId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Unsampledreports.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId', 'unsampledReportId'],
            pathParams: ['accountId', 'profileId', 'unsampledReportId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Unsampledreports.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Unsampledreports.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'profileId'],
            pathParams: ['accountId', 'profileId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Unsampledreports;
}());
exports.Resource$Management$Unsampledreports = Resource$Management$Unsampledreports;
var Resource$Management$Uploads = /** @class */ (function () {
    function Resource$Management$Uploads(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Uploads.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Uploads.prototype.deleteUploadData = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],
            pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Uploads.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId', 'uploadId'],
            pathParams: ['accountId', 'customDataSourceId', 'uploadId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Uploads.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],
            pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Uploads.prototype.uploadData = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            mediaUrl: (rootUrl +
                '/upload/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads')
                .replace(/([^:]\/)\/+/g, '$1'),
            requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],
            pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Uploads;
}());
exports.Resource$Management$Uploads = Resource$Management$Uploads;
var Resource$Management$Webproperties = /** @class */ (function () {
    function Resource$Management$Webproperties(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Webproperties.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Webproperties.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Webproperties.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId'],
            pathParams: ['accountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Webproperties.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId'],
            pathParams: ['accountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Webproperties.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Webproperties.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Webproperties;
}());
exports.Resource$Management$Webproperties = Resource$Management$Webproperties;
var Resource$Management$Webpropertyadwordslinks = /** @class */ (function () {
    function Resource$Management$Webpropertyadwordslinks(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Webpropertyadwordslinks.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Webpropertyadwordslinks.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],
            pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Webpropertyadwordslinks.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],
            pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Webpropertyadwordslinks.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Webpropertyadwordslinks.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Webpropertyadwordslinks.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],
            pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Webpropertyadwordslinks.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],
            pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Webpropertyadwordslinks;
}());
exports.Resource$Management$Webpropertyadwordslinks = Resource$Management$Webpropertyadwordslinks;
var Resource$Management$Webpropertyuserlinks = /** @class */ (function () {
    function Resource$Management$Webpropertyuserlinks(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Management$Webpropertyuserlinks.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Management$Webpropertyuserlinks.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'linkId'],
            pathParams: ['accountId', 'linkId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Webpropertyuserlinks.prototype.insert = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Webpropertyuserlinks.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId'],
            pathParams: ['accountId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Management$Webpropertyuserlinks.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'webPropertyId', 'linkId'],
            pathParams: ['accountId', 'linkId', 'webPropertyId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Management$Webpropertyuserlinks;
}());
exports.Resource$Management$Webpropertyuserlinks = Resource$Management$Webpropertyuserlinks;
var Resource$Metadata = /** @class */ (function () {
    function Resource$Metadata(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.columns = new Resource$Metadata$Columns(root);
    }
    Resource$Metadata.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Metadata;
}());
exports.Resource$Metadata = Resource$Metadata;
var Resource$Metadata$Columns = /** @class */ (function () {
    function Resource$Metadata$Columns(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Metadata$Columns.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Metadata$Columns.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/analytics/v3/metadata/{reportType}/columns')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['reportType'],
            pathParams: ['reportType'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Metadata$Columns;
}());
exports.Resource$Metadata$Columns = Resource$Metadata$Columns;
var Resource$Provisioning = /** @class */ (function () {
    function Resource$Provisioning(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Provisioning.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Provisioning.prototype.createAccountTicket = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/analytics/v3/provisioning/createAccountTicket')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Provisioning.prototype.createAccountTree = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/analytics/v3/provisioning/createAccountTree')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Provisioning;
}());
exports.Resource$Provisioning = Resource$Provisioning;
//# sourceMappingURL=v3.js.map
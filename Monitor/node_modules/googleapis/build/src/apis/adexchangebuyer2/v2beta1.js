"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Ad Exchange Buyer API II
 *
 * Accesses the latest features for managing Ad Exchange accounts, Real-Time
 * Bidding configurations and auction metrics, and Marketplace programmatic
 * deals.
 *
 * @example
 * const google = require('googleapis');
 * const adexchangebuyer2 = google.adexchangebuyer2('v2beta1');
 *
 * @namespace adexchangebuyer2
 * @type {Function}
 * @version v2beta1
 * @variation v2beta1
 * @param {object=} options Options for Adexchangebuyer2
 */
var Adexchangebuyer2 = /** @class */ (function () {
    function Adexchangebuyer2(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.accounts = new Resource$Accounts(this);
        this.bidders = new Resource$Bidders(this);
    }
    Adexchangebuyer2.prototype.getRoot = function () {
        return this.root;
    };
    return Adexchangebuyer2;
}());
exports.Adexchangebuyer2 = Adexchangebuyer2;
var Resource$Accounts = /** @class */ (function () {
    function Resource$Accounts(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.clients = new Resource$Accounts$Clients(root);
        this.creatives = new Resource$Accounts$Creatives(root);
    }
    Resource$Accounts.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Accounts;
}());
exports.Resource$Accounts = Resource$Accounts;
var Resource$Accounts$Clients = /** @class */ (function () {
    function Resource$Accounts$Clients(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.invitations = new Resource$Accounts$Clients$Invitations(root);
        this.users = new Resource$Accounts$Clients$Users(root);
    }
    Resource$Accounts$Clients.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Accounts$Clients.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/accounts/{accountId}/clients')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId'],
            pathParams: ['accountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Clients.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/clients/{clientAccountId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'clientAccountId'],
            pathParams: ['accountId', 'clientAccountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Clients.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/accounts/{accountId}/clients')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId'],
            pathParams: ['accountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Clients.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/clients/{clientAccountId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'clientAccountId'],
            pathParams: ['accountId', 'clientAccountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Accounts$Clients;
}());
exports.Resource$Accounts$Clients = Resource$Accounts$Clients;
var Resource$Accounts$Clients$Invitations = /** @class */ (function () {
    function Resource$Accounts$Clients$Invitations(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Accounts$Clients$Invitations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Accounts$Clients$Invitations.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'clientAccountId'],
            pathParams: ['accountId', 'clientAccountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Clients$Invitations.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'clientAccountId', 'invitationId'],
            pathParams: ['accountId', 'clientAccountId', 'invitationId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Clients$Invitations.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'clientAccountId'],
            pathParams: ['accountId', 'clientAccountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Accounts$Clients$Invitations;
}());
exports.Resource$Accounts$Clients$Invitations = Resource$Accounts$Clients$Invitations;
var Resource$Accounts$Clients$Users = /** @class */ (function () {
    function Resource$Accounts$Clients$Users(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Accounts$Clients$Users.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Accounts$Clients$Users.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'clientAccountId', 'userId'],
            pathParams: ['accountId', 'clientAccountId', 'userId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Clients$Users.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'clientAccountId'],
            pathParams: ['accountId', 'clientAccountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Clients$Users.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'clientAccountId', 'userId'],
            pathParams: ['accountId', 'clientAccountId', 'userId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Accounts$Clients$Users;
}());
exports.Resource$Accounts$Clients$Users = Resource$Accounts$Clients$Users;
var Resource$Accounts$Creatives = /** @class */ (function () {
    function Resource$Accounts$Creatives(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.dealAssociations =
            new Resource$Accounts$Creatives$Dealassociations(root);
    }
    Resource$Accounts$Creatives.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Accounts$Creatives.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId'],
            pathParams: ['accountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Creatives.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/creatives/{creativeId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'creativeId'],
            pathParams: ['accountId', 'creativeId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Creatives.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId'],
            pathParams: ['accountId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Creatives.prototype.stopWatching = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'creativeId'],
            pathParams: ['accountId', 'creativeId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Creatives.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/creatives/{creativeId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['accountId', 'creativeId'],
            pathParams: ['accountId', 'creativeId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Creatives.prototype.watch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/creatives/{creativeId}:watch')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'creativeId'],
            pathParams: ['accountId', 'creativeId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Accounts$Creatives;
}());
exports.Resource$Accounts$Creatives = Resource$Accounts$Creatives;
var Resource$Accounts$Creatives$Dealassociations = /** @class */ (function () {
    function Resource$Accounts$Creatives$Dealassociations(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Accounts$Creatives$Dealassociations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Accounts$Creatives$Dealassociations.prototype.add = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'creativeId'],
            pathParams: ['accountId', 'creativeId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Creatives$Dealassociations.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['accountId', 'creativeId'],
            pathParams: ['accountId', 'creativeId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Accounts$Creatives$Dealassociations.prototype.remove = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['accountId', 'creativeId'],
            pathParams: ['accountId', 'creativeId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Accounts$Creatives$Dealassociations;
}());
exports.Resource$Accounts$Creatives$Dealassociations = Resource$Accounts$Creatives$Dealassociations;
var Resource$Bidders = /** @class */ (function () {
    function Resource$Bidders(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.accounts = new Resource$Bidders$Accounts(root);
        this.filterSets = new Resource$Bidders$Filtersets(root);
    }
    Resource$Bidders.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Bidders;
}());
exports.Resource$Bidders = Resource$Bidders;
var Resource$Bidders$Accounts = /** @class */ (function () {
    function Resource$Bidders$Accounts(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.filterSets = new Resource$Bidders$Accounts$Filtersets(root);
    }
    Resource$Bidders$Accounts.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Bidders$Accounts;
}());
exports.Resource$Bidders$Accounts = Resource$Bidders$Accounts;
var Resource$Bidders$Accounts$Filtersets = /** @class */ (function () {
    function Resource$Bidders$Accounts$Filtersets(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.bidMetrics = new Resource$Bidders$Accounts$Filtersets$Bidmetrics(root);
        this.bidResponseErrors =
            new Resource$Bidders$Accounts$Filtersets$Bidresponseerrors(root);
        this.bidResponsesWithoutBids =
            new Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids(root);
        this.filteredBidRequests =
            new Resource$Bidders$Accounts$Filtersets$Filteredbidrequests(root);
        this.filteredBids =
            new Resource$Bidders$Accounts$Filtersets$Filteredbids(root);
        this.impressionMetrics =
            new Resource$Bidders$Accounts$Filtersets$Impressionmetrics(root);
        this.losingBids = new Resource$Bidders$Accounts$Filtersets$Losingbids(root);
        this.nonBillableWinningBids =
            new Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids(root);
    }
    Resource$Bidders$Accounts$Filtersets.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Accounts$Filtersets.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{ownerName}/filterSets')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['ownerName'],
            pathParams: ['ownerName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Bidders$Accounts$Filtersets.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Bidders$Accounts$Filtersets.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Bidders$Accounts$Filtersets.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{ownerName}/filterSets')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['ownerName'],
            pathParams: ['ownerName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Accounts$Filtersets;
}());
exports.Resource$Bidders$Accounts$Filtersets = Resource$Bidders$Accounts$Filtersets;
var Resource$Bidders$Accounts$Filtersets$Bidmetrics = /** @class */ (function () {
    function Resource$Bidders$Accounts$Filtersets$Bidmetrics(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Accounts$Filtersets$Bidmetrics.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Accounts$Filtersets$Bidmetrics.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/bidMetrics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Accounts$Filtersets$Bidmetrics;
}());
exports.Resource$Bidders$Accounts$Filtersets$Bidmetrics = Resource$Bidders$Accounts$Filtersets$Bidmetrics;
var Resource$Bidders$Accounts$Filtersets$Bidresponseerrors = /** @class */ (function () {
    function Resource$Bidders$Accounts$Filtersets$Bidresponseerrors(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Accounts$Filtersets$Bidresponseerrors.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Accounts$Filtersets$Bidresponseerrors.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/bidResponseErrors')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Accounts$Filtersets$Bidresponseerrors;
}());
exports.Resource$Bidders$Accounts$Filtersets$Bidresponseerrors = Resource$Bidders$Accounts$Filtersets$Bidresponseerrors;
var Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids = /** @class */ (function () {
    function Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/bidResponsesWithoutBids')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids;
}());
exports.Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids = Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids;
var Resource$Bidders$Accounts$Filtersets$Filteredbidrequests = /** @class */ (function () {
    function Resource$Bidders$Accounts$Filtersets$Filteredbidrequests(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Accounts$Filtersets$Filteredbidrequests.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Accounts$Filtersets$Filteredbidrequests.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/filteredBidRequests')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Accounts$Filtersets$Filteredbidrequests;
}());
exports.Resource$Bidders$Accounts$Filtersets$Filteredbidrequests = Resource$Bidders$Accounts$Filtersets$Filteredbidrequests;
var Resource$Bidders$Accounts$Filtersets$Filteredbids = /** @class */ (function () {
    function Resource$Bidders$Accounts$Filtersets$Filteredbids(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.creatives =
            new Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives(root);
        this.details =
            new Resource$Bidders$Accounts$Filtersets$Filteredbids$Details(root);
    }
    Resource$Bidders$Accounts$Filtersets$Filteredbids.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Accounts$Filtersets$Filteredbids.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/filteredBids')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Accounts$Filtersets$Filteredbids;
}());
exports.Resource$Bidders$Accounts$Filtersets$Filteredbids = Resource$Bidders$Accounts$Filtersets$Filteredbids;
var Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives = /** @class */ (function () {
    function Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/creatives')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName', 'creativeStatusId'],
            pathParams: ['creativeStatusId', 'filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives;
}());
exports.Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives = Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives;
var Resource$Bidders$Accounts$Filtersets$Filteredbids$Details = /** @class */ (function () {
    function Resource$Bidders$Accounts$Filtersets$Filteredbids$Details(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Accounts$Filtersets$Filteredbids$Details.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Accounts$Filtersets$Filteredbids$Details.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/details')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName', 'creativeStatusId'],
            pathParams: ['creativeStatusId', 'filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Accounts$Filtersets$Filteredbids$Details;
}());
exports.Resource$Bidders$Accounts$Filtersets$Filteredbids$Details = Resource$Bidders$Accounts$Filtersets$Filteredbids$Details;
var Resource$Bidders$Accounts$Filtersets$Impressionmetrics = /** @class */ (function () {
    function Resource$Bidders$Accounts$Filtersets$Impressionmetrics(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Accounts$Filtersets$Impressionmetrics.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Accounts$Filtersets$Impressionmetrics.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/impressionMetrics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Accounts$Filtersets$Impressionmetrics;
}());
exports.Resource$Bidders$Accounts$Filtersets$Impressionmetrics = Resource$Bidders$Accounts$Filtersets$Impressionmetrics;
var Resource$Bidders$Accounts$Filtersets$Losingbids = /** @class */ (function () {
    function Resource$Bidders$Accounts$Filtersets$Losingbids(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Accounts$Filtersets$Losingbids.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Accounts$Filtersets$Losingbids.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/losingBids')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Accounts$Filtersets$Losingbids;
}());
exports.Resource$Bidders$Accounts$Filtersets$Losingbids = Resource$Bidders$Accounts$Filtersets$Losingbids;
var Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids = /** @class */ (function () {
    function Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/nonBillableWinningBids')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids;
}());
exports.Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids = Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids;
var Resource$Bidders$Filtersets = /** @class */ (function () {
    function Resource$Bidders$Filtersets(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.bidMetrics = new Resource$Bidders$Filtersets$Bidmetrics(root);
        this.bidResponseErrors =
            new Resource$Bidders$Filtersets$Bidresponseerrors(root);
        this.bidResponsesWithoutBids =
            new Resource$Bidders$Filtersets$Bidresponseswithoutbids(root);
        this.filteredBidRequests =
            new Resource$Bidders$Filtersets$Filteredbidrequests(root);
        this.filteredBids = new Resource$Bidders$Filtersets$Filteredbids(root);
        this.impressionMetrics =
            new Resource$Bidders$Filtersets$Impressionmetrics(root);
        this.losingBids = new Resource$Bidders$Filtersets$Losingbids(root);
        this.nonBillableWinningBids =
            new Resource$Bidders$Filtersets$Nonbillablewinningbids(root);
    }
    Resource$Bidders$Filtersets.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Filtersets.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{ownerName}/filterSets')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['ownerName'],
            pathParams: ['ownerName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Bidders$Filtersets.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Bidders$Filtersets.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Bidders$Filtersets.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{ownerName}/filterSets')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['ownerName'],
            pathParams: ['ownerName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Filtersets;
}());
exports.Resource$Bidders$Filtersets = Resource$Bidders$Filtersets;
var Resource$Bidders$Filtersets$Bidmetrics = /** @class */ (function () {
    function Resource$Bidders$Filtersets$Bidmetrics(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Filtersets$Bidmetrics.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Filtersets$Bidmetrics.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/bidMetrics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Filtersets$Bidmetrics;
}());
exports.Resource$Bidders$Filtersets$Bidmetrics = Resource$Bidders$Filtersets$Bidmetrics;
var Resource$Bidders$Filtersets$Bidresponseerrors = /** @class */ (function () {
    function Resource$Bidders$Filtersets$Bidresponseerrors(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Filtersets$Bidresponseerrors.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Filtersets$Bidresponseerrors.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/bidResponseErrors')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Filtersets$Bidresponseerrors;
}());
exports.Resource$Bidders$Filtersets$Bidresponseerrors = Resource$Bidders$Filtersets$Bidresponseerrors;
var Resource$Bidders$Filtersets$Bidresponseswithoutbids = /** @class */ (function () {
    function Resource$Bidders$Filtersets$Bidresponseswithoutbids(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Filtersets$Bidresponseswithoutbids.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Filtersets$Bidresponseswithoutbids.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/bidResponsesWithoutBids')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Filtersets$Bidresponseswithoutbids;
}());
exports.Resource$Bidders$Filtersets$Bidresponseswithoutbids = Resource$Bidders$Filtersets$Bidresponseswithoutbids;
var Resource$Bidders$Filtersets$Filteredbidrequests = /** @class */ (function () {
    function Resource$Bidders$Filtersets$Filteredbidrequests(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Filtersets$Filteredbidrequests.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Filtersets$Filteredbidrequests.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/filteredBidRequests')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Filtersets$Filteredbidrequests;
}());
exports.Resource$Bidders$Filtersets$Filteredbidrequests = Resource$Bidders$Filtersets$Filteredbidrequests;
var Resource$Bidders$Filtersets$Filteredbids = /** @class */ (function () {
    function Resource$Bidders$Filtersets$Filteredbids(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.creatives =
            new Resource$Bidders$Filtersets$Filteredbids$Creatives(root);
        this.details = new Resource$Bidders$Filtersets$Filteredbids$Details(root);
    }
    Resource$Bidders$Filtersets$Filteredbids.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Filtersets$Filteredbids.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/filteredBids')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Filtersets$Filteredbids;
}());
exports.Resource$Bidders$Filtersets$Filteredbids = Resource$Bidders$Filtersets$Filteredbids;
var Resource$Bidders$Filtersets$Filteredbids$Creatives = /** @class */ (function () {
    function Resource$Bidders$Filtersets$Filteredbids$Creatives(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Filtersets$Filteredbids$Creatives.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Filtersets$Filteredbids$Creatives.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/creatives')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName', 'creativeStatusId'],
            pathParams: ['creativeStatusId', 'filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Filtersets$Filteredbids$Creatives;
}());
exports.Resource$Bidders$Filtersets$Filteredbids$Creatives = Resource$Bidders$Filtersets$Filteredbids$Creatives;
var Resource$Bidders$Filtersets$Filteredbids$Details = /** @class */ (function () {
    function Resource$Bidders$Filtersets$Filteredbids$Details(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Filtersets$Filteredbids$Details.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Filtersets$Filteredbids$Details.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/details')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName', 'creativeStatusId'],
            pathParams: ['creativeStatusId', 'filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Filtersets$Filteredbids$Details;
}());
exports.Resource$Bidders$Filtersets$Filteredbids$Details = Resource$Bidders$Filtersets$Filteredbids$Details;
var Resource$Bidders$Filtersets$Impressionmetrics = /** @class */ (function () {
    function Resource$Bidders$Filtersets$Impressionmetrics(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Filtersets$Impressionmetrics.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Filtersets$Impressionmetrics.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/impressionMetrics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Filtersets$Impressionmetrics;
}());
exports.Resource$Bidders$Filtersets$Impressionmetrics = Resource$Bidders$Filtersets$Impressionmetrics;
var Resource$Bidders$Filtersets$Losingbids = /** @class */ (function () {
    function Resource$Bidders$Filtersets$Losingbids(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Filtersets$Losingbids.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Filtersets$Losingbids.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/losingBids')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Filtersets$Losingbids;
}());
exports.Resource$Bidders$Filtersets$Losingbids = Resource$Bidders$Filtersets$Losingbids;
var Resource$Bidders$Filtersets$Nonbillablewinningbids = /** @class */ (function () {
    function Resource$Bidders$Filtersets$Nonbillablewinningbids(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Bidders$Filtersets$Nonbillablewinningbids.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Bidders$Filtersets$Nonbillablewinningbids.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{filterSetName}/nonBillableWinningBids')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['filterSetName'],
            pathParams: ['filterSetName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Bidders$Filtersets$Nonbillablewinningbids;
}());
exports.Resource$Bidders$Filtersets$Nonbillablewinningbids = Resource$Bidders$Filtersets$Nonbillablewinningbids;
//# sourceMappingURL=v2beta1.js.map
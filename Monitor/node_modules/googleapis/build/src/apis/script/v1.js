"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Apps Script API
 *
 * An API for managing and executing Google Apps Script projects.
 *
 * @example
 * const google = require('googleapis');
 * const script = google.script('v1');
 *
 * @namespace script
 * @type {Function}
 * @version v1
 * @variation v1
 * @param {object=} options Options for Script
 */
var Script = /** @class */ (function () {
    function Script(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.processes = new Resource$Processes(this);
        this.projects = new Resource$Projects(this);
        this.scripts = new Resource$Scripts(this);
    }
    Script.prototype.getRoot = function () {
        return this.root;
    };
    return Script;
}());
exports.Script = Script;
var Resource$Processes = /** @class */ (function () {
    function Resource$Processes(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Processes.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Processes.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/processes').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Processes.prototype.listScriptProcesses = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/processes:listScriptProcesses')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Processes;
}());
exports.Resource$Processes = Resource$Processes;
var Resource$Projects = /** @class */ (function () {
    function Resource$Projects(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.deployments = new Resource$Projects$Deployments(root);
        this.versions = new Resource$Projects$Versions(root);
    }
    Resource$Projects.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects').replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects/{scriptId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['scriptId'],
            pathParams: ['scriptId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects.prototype.getContent = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects/{scriptId}/content')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['scriptId'],
            pathParams: ['scriptId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects.prototype.getMetrics = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects/{scriptId}/metrics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['scriptId'],
            pathParams: ['scriptId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects.prototype.updateContent = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects/{scriptId}/content')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['scriptId'],
            pathParams: ['scriptId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects;
}());
exports.Resource$Projects = Resource$Projects;
var Resource$Projects$Deployments = /** @class */ (function () {
    function Resource$Projects$Deployments(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Deployments.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Deployments.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects/{scriptId}/deployments')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['scriptId'],
            pathParams: ['scriptId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Deployments.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects/{scriptId}/deployments/{deploymentId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['scriptId', 'deploymentId'],
            pathParams: ['deploymentId', 'scriptId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Deployments.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects/{scriptId}/deployments/{deploymentId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['scriptId', 'deploymentId'],
            pathParams: ['deploymentId', 'scriptId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Deployments.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects/{scriptId}/deployments')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['scriptId'],
            pathParams: ['scriptId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Deployments.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects/{scriptId}/deployments/{deploymentId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['scriptId', 'deploymentId'],
            pathParams: ['deploymentId', 'scriptId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Deployments;
}());
exports.Resource$Projects$Deployments = Resource$Projects$Deployments;
var Resource$Projects$Versions = /** @class */ (function () {
    function Resource$Projects$Versions(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Versions.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Versions.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects/{scriptId}/versions')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['scriptId'],
            pathParams: ['scriptId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Versions.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects/{scriptId}/versions/{versionNumber}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['scriptId', 'versionNumber'],
            pathParams: ['scriptId', 'versionNumber'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Versions.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/projects/{scriptId}/versions')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['scriptId'],
            pathParams: ['scriptId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Versions;
}());
exports.Resource$Projects$Versions = Resource$Projects$Versions;
var Resource$Scripts = /** @class */ (function () {
    function Resource$Scripts(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Scripts.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Scripts.prototype.run = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/scripts/{scriptId}:run')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['scriptId'],
            pathParams: ['scriptId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Scripts;
}());
exports.Resource$Scripts = Resource$Scripts;
//# sourceMappingURL=v1.js.map
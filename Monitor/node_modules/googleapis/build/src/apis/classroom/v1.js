"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Google Classroom API
 *
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * @example
 * const google = require('googleapis');
 * const classroom = google.classroom('v1');
 *
 * @namespace classroom
 * @type {Function}
 * @version v1
 * @variation v1
 * @param {object=} options Options for Classroom
 */
var Classroom = /** @class */ (function () {
    function Classroom(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.courses = new Resource$Courses(this);
        this.invitations = new Resource$Invitations(this);
        this.registrations = new Resource$Registrations(this);
        this.userProfiles = new Resource$Userprofiles(this);
    }
    Classroom.prototype.getRoot = function () {
        return this.root;
    };
    return Classroom;
}());
exports.Classroom = Classroom;
var Resource$Courses = /** @class */ (function () {
    function Resource$Courses(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.aliases = new Resource$Courses$Aliases(root);
        this.announcements = new Resource$Courses$Announcements(root);
        this.courseWork = new Resource$Courses$Coursework(root);
        this.students = new Resource$Courses$Students(root);
        this.teachers = new Resource$Courses$Teachers(root);
        this.topics = new Resource$Courses$Topics(root);
    }
    Resource$Courses.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Courses.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses').replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['id'],
            pathParams: ['id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['id'],
            pathParams: ['id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['id'],
            pathParams: ['id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['id'],
            pathParams: ['id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Courses;
}());
exports.Resource$Courses = Resource$Courses;
var Resource$Courses$Aliases = /** @class */ (function () {
    function Resource$Courses$Aliases(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Courses$Aliases.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Courses$Aliases.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/aliases')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['courseId'],
            pathParams: ['courseId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Aliases.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/aliases/{alias}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['courseId', 'alias'],
            pathParams: ['alias', 'courseId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Aliases.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/aliases')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId'],
            pathParams: ['courseId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Courses$Aliases;
}());
exports.Resource$Courses$Aliases = Resource$Courses$Aliases;
var Resource$Courses$Announcements = /** @class */ (function () {
    function Resource$Courses$Announcements(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Courses$Announcements.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Courses$Announcements.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/announcements')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['courseId'],
            pathParams: ['courseId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Announcements.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['courseId', 'id'],
            pathParams: ['courseId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Announcements.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId', 'id'],
            pathParams: ['courseId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Announcements.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/announcements')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId'],
            pathParams: ['courseId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Announcements.prototype.modifyAssignees = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/courses/{courseId}/announcements/{id}:modifyAssignees')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['courseId', 'id'],
            pathParams: ['courseId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Announcements.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['courseId', 'id'],
            pathParams: ['courseId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Courses$Announcements;
}());
exports.Resource$Courses$Announcements = Resource$Courses$Announcements;
var Resource$Courses$Coursework = /** @class */ (function () {
    function Resource$Courses$Coursework(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.studentSubmissions =
            new Resource$Courses$Coursework$Studentsubmissions(root);
    }
    Resource$Courses$Coursework.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Courses$Coursework.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/courseWork')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['courseId'],
            pathParams: ['courseId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Coursework.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['courseId', 'id'],
            pathParams: ['courseId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Coursework.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId', 'id'],
            pathParams: ['courseId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Coursework.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/courseWork')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId'],
            pathParams: ['courseId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Coursework.prototype.modifyAssignees = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/courses/{courseId}/courseWork/{id}:modifyAssignees')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['courseId', 'id'],
            pathParams: ['courseId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Coursework.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['courseId', 'id'],
            pathParams: ['courseId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Courses$Coursework;
}());
exports.Resource$Courses$Coursework = Resource$Courses$Coursework;
var Resource$Courses$Coursework$Studentsubmissions = /** @class */ (function () {
    function Resource$Courses$Coursework$Studentsubmissions(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Courses$Coursework$Studentsubmissions.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Courses$Coursework$Studentsubmissions.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId', 'courseWorkId', 'id'],
            pathParams: ['courseId', 'courseWorkId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Coursework$Studentsubmissions.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId', 'courseWorkId'],
            pathParams: ['courseId', 'courseWorkId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Coursework$Studentsubmissions.prototype.modifyAttachments = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:modifyAttachments')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['courseId', 'courseWorkId', 'id'],
            pathParams: ['courseId', 'courseWorkId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Coursework$Studentsubmissions.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['courseId', 'courseWorkId', 'id'],
            pathParams: ['courseId', 'courseWorkId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Coursework$Studentsubmissions.prototype.reclaim = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:reclaim')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['courseId', 'courseWorkId', 'id'],
            pathParams: ['courseId', 'courseWorkId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Coursework$Studentsubmissions.prototype.return = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:return')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['courseId', 'courseWorkId', 'id'],
            pathParams: ['courseId', 'courseWorkId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Coursework$Studentsubmissions.prototype.turnIn = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:turnIn')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['courseId', 'courseWorkId', 'id'],
            pathParams: ['courseId', 'courseWorkId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Courses$Coursework$Studentsubmissions;
}());
exports.Resource$Courses$Coursework$Studentsubmissions = Resource$Courses$Coursework$Studentsubmissions;
var Resource$Courses$Students = /** @class */ (function () {
    function Resource$Courses$Students(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Courses$Students.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Courses$Students.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/students')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['courseId'],
            pathParams: ['courseId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Students.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/students/{userId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['courseId', 'userId'],
            pathParams: ['courseId', 'userId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Students.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/students/{userId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId', 'userId'],
            pathParams: ['courseId', 'userId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Students.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/students')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId'],
            pathParams: ['courseId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Courses$Students;
}());
exports.Resource$Courses$Students = Resource$Courses$Students;
var Resource$Courses$Teachers = /** @class */ (function () {
    function Resource$Courses$Teachers(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Courses$Teachers.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Courses$Teachers.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/teachers')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['courseId'],
            pathParams: ['courseId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Teachers.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/teachers/{userId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['courseId', 'userId'],
            pathParams: ['courseId', 'userId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Teachers.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/teachers/{userId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId', 'userId'],
            pathParams: ['courseId', 'userId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Teachers.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/teachers')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId'],
            pathParams: ['courseId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Courses$Teachers;
}());
exports.Resource$Courses$Teachers = Resource$Courses$Teachers;
var Resource$Courses$Topics = /** @class */ (function () {
    function Resource$Courses$Topics(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Courses$Topics.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Courses$Topics.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/topics/{id}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId', 'id'],
            pathParams: ['courseId', 'id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Courses$Topics.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/courses/{courseId}/topics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['courseId'],
            pathParams: ['courseId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Courses$Topics;
}());
exports.Resource$Courses$Topics = Resource$Courses$Topics;
var Resource$Invitations = /** @class */ (function () {
    function Resource$Invitations(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Invitations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Invitations.prototype.accept = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/invitations/{id}:accept')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['id'],
            pathParams: ['id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Invitations.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/invitations').replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Invitations.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/invitations/{id}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['id'],
            pathParams: ['id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Invitations.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/invitations/{id}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['id'],
            pathParams: ['id'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Invitations.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/invitations').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Invitations;
}());
exports.Resource$Invitations = Resource$Invitations;
var Resource$Registrations = /** @class */ (function () {
    function Resource$Registrations(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Registrations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Registrations.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/registrations').replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Registrations.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/registrations/{registrationId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['registrationId'],
            pathParams: ['registrationId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Registrations;
}());
exports.Resource$Registrations = Resource$Registrations;
var Resource$Userprofiles = /** @class */ (function () {
    function Resource$Userprofiles(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.guardianInvitations =
            new Resource$Userprofiles$Guardianinvitations(root);
        this.guardians = new Resource$Userprofiles$Guardians(root);
    }
    Resource$Userprofiles.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Userprofiles.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/userProfiles/{userId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['userId'],
            pathParams: ['userId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Userprofiles;
}());
exports.Resource$Userprofiles = Resource$Userprofiles;
var Resource$Userprofiles$Guardianinvitations = /** @class */ (function () {
    function Resource$Userprofiles$Guardianinvitations(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Userprofiles$Guardianinvitations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Userprofiles$Guardianinvitations.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/userProfiles/{studentId}/guardianInvitations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['studentId'],
            pathParams: ['studentId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Userprofiles$Guardianinvitations.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/userProfiles/{studentId}/guardianInvitations/{invitationId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['studentId', 'invitationId'],
            pathParams: ['invitationId', 'studentId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Userprofiles$Guardianinvitations.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/userProfiles/{studentId}/guardianInvitations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['studentId'],
            pathParams: ['studentId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Userprofiles$Guardianinvitations.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/userProfiles/{studentId}/guardianInvitations/{invitationId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['studentId', 'invitationId'],
            pathParams: ['invitationId', 'studentId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Userprofiles$Guardianinvitations;
}());
exports.Resource$Userprofiles$Guardianinvitations = Resource$Userprofiles$Guardianinvitations;
var Resource$Userprofiles$Guardians = /** @class */ (function () {
    function Resource$Userprofiles$Guardians(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Userprofiles$Guardians.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Userprofiles$Guardians.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/userProfiles/{studentId}/guardians/{guardianId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['studentId', 'guardianId'],
            pathParams: ['guardianId', 'studentId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Userprofiles$Guardians.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1/userProfiles/{studentId}/guardians/{guardianId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['studentId', 'guardianId'],
            pathParams: ['guardianId', 'studentId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Userprofiles$Guardians.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/userProfiles/{studentId}/guardians')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['studentId'],
            pathParams: ['studentId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Userprofiles$Guardians;
}());
exports.Resource$Userprofiles$Guardians = Resource$Userprofiles$Guardians;
//# sourceMappingURL=v1.js.map
"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Dataflow API
 *
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * @example
 * const google = require('googleapis');
 * const dataflow = google.dataflow('v1b3');
 *
 * @namespace dataflow
 * @type {Function}
 * @version v1b3
 * @variation v1b3
 * @param {object=} options Options for Dataflow
 */
var Dataflow = /** @class */ (function () {
    function Dataflow(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.projects = new Resource$Projects(this);
    }
    Dataflow.prototype.getRoot = function () {
        return this.root;
    };
    return Dataflow;
}());
exports.Dataflow = Dataflow;
var Resource$Projects = /** @class */ (function () {
    function Resource$Projects(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.jobs = new Resource$Projects$Jobs(root);
        this.locations = new Resource$Projects$Locations(root);
        this.templates = new Resource$Projects$Templates(root);
    }
    Resource$Projects.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects.prototype.workerMessages = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1b3/projects/{projectId}/WorkerMessages')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId'],
            pathParams: ['projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects;
}());
exports.Resource$Projects = Resource$Projects;
var Resource$Projects$Jobs = /** @class */ (function () {
    function Resource$Projects$Jobs(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.debug = new Resource$Projects$Jobs$Debug(root);
        this.messages = new Resource$Projects$Jobs$Messages(root);
        this.workItems = new Resource$Projects$Jobs$Workitems(root);
    }
    Resource$Projects$Jobs.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Jobs.prototype.aggregated = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1b3/projects/{projectId}/jobs:aggregated')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId'],
            pathParams: ['projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Jobs.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1b3/projects/{projectId}/jobs')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId'],
            pathParams: ['projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Jobs.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'jobId'],
            pathParams: ['jobId', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Jobs.prototype.getMetrics = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/metrics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'jobId'],
            pathParams: ['jobId', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Jobs.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1b3/projects/{projectId}/jobs')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId'],
            pathParams: ['projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Jobs.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['projectId', 'jobId'],
            pathParams: ['jobId', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Jobs;
}());
exports.Resource$Projects$Jobs = Resource$Projects$Jobs;
var Resource$Projects$Jobs$Debug = /** @class */ (function () {
    function Resource$Projects$Jobs$Debug(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Jobs$Debug.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Jobs$Debug.prototype.getConfig = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'jobId'],
            pathParams: ['jobId', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Jobs$Debug.prototype.sendCapture = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'jobId'],
            pathParams: ['jobId', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Jobs$Debug;
}());
exports.Resource$Projects$Jobs$Debug = Resource$Projects$Jobs$Debug;
var Resource$Projects$Jobs$Messages = /** @class */ (function () {
    function Resource$Projects$Jobs$Messages(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Jobs$Messages.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Jobs$Messages.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/messages')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'jobId'],
            pathParams: ['jobId', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Jobs$Messages;
}());
exports.Resource$Projects$Jobs$Messages = Resource$Projects$Jobs$Messages;
var Resource$Projects$Jobs$Workitems = /** @class */ (function () {
    function Resource$Projects$Jobs$Workitems(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Jobs$Workitems.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Jobs$Workitems.prototype.lease = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'jobId'],
            pathParams: ['jobId', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Jobs$Workitems.prototype.reportStatus = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'jobId'],
            pathParams: ['jobId', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Jobs$Workitems;
}());
exports.Resource$Projects$Jobs$Workitems = Resource$Projects$Jobs$Workitems;
var Resource$Projects$Locations = /** @class */ (function () {
    function Resource$Projects$Locations(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.jobs = new Resource$Projects$Locations$Jobs(root);
        this.templates = new Resource$Projects$Locations$Templates(root);
    }
    Resource$Projects$Locations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Locations.prototype.workerMessages = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/WorkerMessages')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location'],
            pathParams: ['location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Locations;
}());
exports.Resource$Projects$Locations = Resource$Projects$Locations;
var Resource$Projects$Locations$Jobs = /** @class */ (function () {
    function Resource$Projects$Locations$Jobs(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.debug = new Resource$Projects$Locations$Jobs$Debug(root);
        this.messages = new Resource$Projects$Locations$Jobs$Messages(root);
        this.workItems = new Resource$Projects$Locations$Jobs$Workitems(root);
    }
    Resource$Projects$Locations$Jobs.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Locations$Jobs.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/jobs')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location'],
            pathParams: ['location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Jobs.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location', 'jobId'],
            pathParams: ['jobId', 'location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Jobs.prototype.getMetrics = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/metrics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location', 'jobId'],
            pathParams: ['jobId', 'location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Jobs.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/jobs')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location'],
            pathParams: ['location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Jobs.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location', 'jobId'],
            pathParams: ['jobId', 'location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Locations$Jobs;
}());
exports.Resource$Projects$Locations$Jobs = Resource$Projects$Locations$Jobs;
var Resource$Projects$Locations$Jobs$Debug = /** @class */ (function () {
    function Resource$Projects$Locations$Jobs$Debug(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Locations$Jobs$Debug.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Locations$Jobs$Debug.prototype.getConfig = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/getConfig')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location', 'jobId'],
            pathParams: ['jobId', 'location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Jobs$Debug.prototype.sendCapture = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/sendCapture')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location', 'jobId'],
            pathParams: ['jobId', 'location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Locations$Jobs$Debug;
}());
exports.Resource$Projects$Locations$Jobs$Debug = Resource$Projects$Locations$Jobs$Debug;
var Resource$Projects$Locations$Jobs$Messages = /** @class */ (function () {
    function Resource$Projects$Locations$Jobs$Messages(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Locations$Jobs$Messages.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Locations$Jobs$Messages.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/messages')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location', 'jobId'],
            pathParams: ['jobId', 'location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Locations$Jobs$Messages;
}());
exports.Resource$Projects$Locations$Jobs$Messages = Resource$Projects$Locations$Jobs$Messages;
var Resource$Projects$Locations$Jobs$Workitems = /** @class */ (function () {
    function Resource$Projects$Locations$Jobs$Workitems(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Locations$Jobs$Workitems.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Locations$Jobs$Workitems.prototype.lease = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:lease')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location', 'jobId'],
            pathParams: ['jobId', 'location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Jobs$Workitems.prototype.reportStatus = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:reportStatus')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location', 'jobId'],
            pathParams: ['jobId', 'location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Locations$Jobs$Workitems;
}());
exports.Resource$Projects$Locations$Jobs$Workitems = Resource$Projects$Locations$Jobs$Workitems;
var Resource$Projects$Locations$Templates = /** @class */ (function () {
    function Resource$Projects$Locations$Templates(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Locations$Templates.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Locations$Templates.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/templates')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location'],
            pathParams: ['location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Templates.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/templates:get')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location'],
            pathParams: ['location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Templates.prototype.launch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1b3/projects/{projectId}/locations/{location}/templates:launch')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'location'],
            pathParams: ['location', 'projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Locations$Templates;
}());
exports.Resource$Projects$Locations$Templates = Resource$Projects$Locations$Templates;
var Resource$Projects$Templates = /** @class */ (function () {
    function Resource$Projects$Templates(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Templates.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Templates.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1b3/projects/{projectId}/templates')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId'],
            pathParams: ['projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Templates.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1b3/projects/{projectId}/templates:get')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId'],
            pathParams: ['projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Templates.prototype.launch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1b3/projects/{projectId}/templates:launch')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId'],
            pathParams: ['projectId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Templates;
}());
exports.Resource$Projects$Templates = Resource$Projects$Templates;
//# sourceMappingURL=v1b3.js.map
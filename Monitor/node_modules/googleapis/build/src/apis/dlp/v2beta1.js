"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Cloud Data Loss Prevention (DLP) API
 *
 * Provides methods for detection, risk analysis, and de-identification of
 * privacy-sensitive fragments in text, images, and Google Cloud Platform
 * storage repositories.
 *
 * @example
 * const google = require('googleapis');
 * const dlp = google.dlp('v2beta1');
 *
 * @namespace dlp
 * @type {Function}
 * @version v2beta1
 * @variation v2beta1
 * @param {object=} options Options for Dlp
 */
var Dlp = /** @class */ (function () {
    function Dlp(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.content = new Resource$Content(this);
        this.dataSource = new Resource$Datasource(this);
        this.inspect = new Resource$Inspect(this);
        this.riskAnalysis = new Resource$Riskanalysis(this);
        this.rootCategories = new Resource$Rootcategories(this);
    }
    Dlp.prototype.getRoot = function () {
        return this.root;
    };
    return Dlp;
}());
exports.Dlp = Dlp;
var Resource$Content = /** @class */ (function () {
    function Resource$Content(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Content.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Content.prototype.deidentify = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/content:deidentify')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Content.prototype.inspect = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/content:inspect')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Content.prototype.redact = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/content:redact')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Content;
}());
exports.Resource$Content = Resource$Content;
var Resource$Datasource = /** @class */ (function () {
    function Resource$Datasource(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Datasource.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Datasource.prototype.analyze = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/dataSource:analyze')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Datasource;
}());
exports.Resource$Datasource = Resource$Datasource;
var Resource$Inspect = /** @class */ (function () {
    function Resource$Inspect(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.operations = new Resource$Inspect$Operations(root);
        this.results = new Resource$Inspect$Results(root);
    }
    Resource$Inspect.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Inspect;
}());
exports.Resource$Inspect = Resource$Inspect;
var Resource$Inspect$Operations = /** @class */ (function () {
    function Resource$Inspect$Operations(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Inspect$Operations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Inspect$Operations.prototype.cancel = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}:cancel')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Inspect$Operations.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/inspect/operations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Inspect$Operations.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Inspect$Operations.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Inspect$Operations.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Inspect$Operations;
}());
exports.Resource$Inspect$Operations = Resource$Inspect$Operations;
var Resource$Inspect$Results = /** @class */ (function () {
    function Resource$Inspect$Results(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.findings = new Resource$Inspect$Results$Findings(root);
    }
    Resource$Inspect$Results.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Inspect$Results;
}());
exports.Resource$Inspect$Results = Resource$Inspect$Results;
var Resource$Inspect$Results$Findings = /** @class */ (function () {
    function Resource$Inspect$Results$Findings(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Inspect$Results$Findings.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Inspect$Results$Findings.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}/findings')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Inspect$Results$Findings;
}());
exports.Resource$Inspect$Results$Findings = Resource$Inspect$Results$Findings;
var Resource$Riskanalysis = /** @class */ (function () {
    function Resource$Riskanalysis(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.operations = new Resource$Riskanalysis$Operations(root);
    }
    Resource$Riskanalysis.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Riskanalysis;
}());
exports.Resource$Riskanalysis = Resource$Riskanalysis;
var Resource$Riskanalysis$Operations = /** @class */ (function () {
    function Resource$Riskanalysis$Operations(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Riskanalysis$Operations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Riskanalysis$Operations.prototype.cancel = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}:cancel')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Riskanalysis$Operations.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Riskanalysis$Operations.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Riskanalysis$Operations.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Riskanalysis$Operations;
}());
exports.Resource$Riskanalysis$Operations = Resource$Riskanalysis$Operations;
var Resource$Rootcategories = /** @class */ (function () {
    function Resource$Rootcategories(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.infoTypes = new Resource$Rootcategories$Infotypes(root);
    }
    Resource$Rootcategories.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Rootcategories.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/rootCategories')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Rootcategories;
}());
exports.Resource$Rootcategories = Resource$Rootcategories;
var Resource$Rootcategories$Infotypes = /** @class */ (function () {
    function Resource$Rootcategories$Infotypes(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Rootcategories$Infotypes.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Rootcategories$Infotypes.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/rootCategories/{category}/infoTypes')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['category'],
            pathParams: ['category'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Rootcategories$Infotypes;
}());
exports.Resource$Rootcategories$Infotypes = Resource$Rootcategories$Infotypes;
//# sourceMappingURL=v2beta1.js.map
"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Google Kubernetes Engine API
 *
 * The Google Kubernetes Engine API is used for building and managing container
 * based applications, powered by the open source Kubernetes technology.
 *
 * @example
 * const google = require('googleapis');
 * const container = google.container('v1beta1');
 *
 * @namespace container
 * @type {Function}
 * @version v1beta1
 * @variation v1beta1
 * @param {object=} options Options for Container
 */
var Container = /** @class */ (function () {
    function Container(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.projects = new Resource$Projects(this);
    }
    Container.prototype.getRoot = function () {
        return this.root;
    };
    return Container;
}());
exports.Container = Container;
var Resource$Projects = /** @class */ (function () {
    function Resource$Projects(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.locations = new Resource$Projects$Locations(root);
        this.zones = new Resource$Projects$Zones(root);
    }
    Resource$Projects.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Projects;
}());
exports.Resource$Projects = Resource$Projects;
var Resource$Projects$Locations = /** @class */ (function () {
    function Resource$Projects$Locations(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.clusters = new Resource$Projects$Locations$Clusters(root);
        this.operations = new Resource$Projects$Locations$Operations(root);
    }
    Resource$Projects$Locations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Locations.prototype.getServerConfig = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}/serverConfig')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Locations;
}());
exports.Resource$Projects$Locations = Resource$Projects$Locations;
var Resource$Projects$Locations$Clusters = /** @class */ (function () {
    function Resource$Projects$Locations$Clusters(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.nodePools = new Resource$Projects$Locations$Clusters$Nodepools(root);
    }
    Resource$Projects$Locations$Clusters.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Locations$Clusters.prototype.completeIpRotation = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:completeIpRotation')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{parent}/clusters')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{parent}/clusters')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.setAddons = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:setAddons')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.setLegacyAbac = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:setLegacyAbac')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.setLocations = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:setLocations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.setLogging = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:setLogging')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.setMaintenancePolicy = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:setMaintenancePolicy')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.setMasterAuth = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:setMasterAuth')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.setMonitoring = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:setMonitoring')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.setNetworkPolicy = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:setNetworkPolicy')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.setResourceLabels = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:setResourceLabels')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.startIpRotation = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:startIpRotation')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters.prototype.updateMaster = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:updateMaster')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Locations$Clusters;
}());
exports.Resource$Projects$Locations$Clusters = Resource$Projects$Locations$Clusters;
var Resource$Projects$Locations$Clusters$Nodepools = /** @class */ (function () {
    function Resource$Projects$Locations$Clusters$Nodepools(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Locations$Clusters$Nodepools.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Locations$Clusters$Nodepools.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{parent}/nodePools')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters$Nodepools.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters$Nodepools.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters$Nodepools.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{parent}/nodePools')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters$Nodepools.prototype.rollback = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:rollback')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters$Nodepools.prototype.setAutoscaling = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:setAutoscaling')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters$Nodepools.prototype.setManagement = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:setManagement')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters$Nodepools.prototype.setSize = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:setSize')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Clusters$Nodepools.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Locations$Clusters$Nodepools;
}());
exports.Resource$Projects$Locations$Clusters$Nodepools = Resource$Projects$Locations$Clusters$Nodepools;
var Resource$Projects$Locations$Operations = /** @class */ (function () {
    function Resource$Projects$Locations$Operations(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Locations$Operations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Locations$Operations.prototype.cancel = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}:cancel')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Operations.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Locations$Operations.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{parent}/operations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Locations$Operations;
}());
exports.Resource$Projects$Locations$Operations = Resource$Projects$Locations$Operations;
var Resource$Projects$Zones = /** @class */ (function () {
    function Resource$Projects$Zones(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.clusters = new Resource$Projects$Zones$Clusters(root);
        this.operations = new Resource$Projects$Zones$Operations(root);
    }
    Resource$Projects$Zones.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Zones.prototype.getServerconfig = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/serverconfig')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone'],
            pathParams: ['projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Zones;
}());
exports.Resource$Projects$Zones = Resource$Projects$Zones;
var Resource$Projects$Zones$Clusters = /** @class */ (function () {
    function Resource$Projects$Zones$Clusters(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.nodePools = new Resource$Projects$Zones$Clusters$Nodepools(root);
    }
    Resource$Projects$Zones$Clusters.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Zones$Clusters.prototype.addons = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/addons')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.completeIpRotation = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:completeIpRotation')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone'],
            pathParams: ['projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.legacyAbac = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/legacyAbac')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone'],
            pathParams: ['projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.locations = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/locations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.logging = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/logging')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.master = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/master')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.monitoring = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/monitoring')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.resourceLabels = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/resourceLabels')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.setMaintenancePolicy = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMaintenancePolicy')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.setMasterAuth = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMasterAuth')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.setNetworkPolicy = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setNetworkPolicy')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.startIpRotation = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:startIpRotation')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Zones$Clusters;
}());
exports.Resource$Projects$Zones$Clusters = Resource$Projects$Zones$Clusters;
var Resource$Projects$Zones$Clusters$Nodepools = /** @class */ (function () {
    function Resource$Projects$Zones$Clusters$Nodepools(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Zones$Clusters$Nodepools.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Zones$Clusters$Nodepools.prototype.autoscaling = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/autoscaling')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],
            pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters$Nodepools.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters$Nodepools.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],
            pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters$Nodepools.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],
            pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters$Nodepools.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId'],
            pathParams: ['clusterId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters$Nodepools.prototype.rollback = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}:rollback')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],
            pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters$Nodepools.prototype.setManagement = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setManagement')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],
            pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters$Nodepools.prototype.setSize = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setSize')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],
            pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Clusters$Nodepools.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/update')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],
            pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Zones$Clusters$Nodepools;
}());
exports.Resource$Projects$Zones$Clusters$Nodepools = Resource$Projects$Zones$Clusters$Nodepools;
var Resource$Projects$Zones$Operations = /** @class */ (function () {
    function Resource$Projects$Zones$Operations(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Zones$Operations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Zones$Operations.prototype.cancel = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/operations/{operationId}:cancel')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'operationId'],
            pathParams: ['operationId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Operations.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/operations/{operationId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone', 'operationId'],
            pathParams: ['operationId', 'projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Zones$Operations.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta1/projects/{projectId}/zones/{zone}/operations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['projectId', 'zone'],
            pathParams: ['projectId', 'zone'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Zones$Operations;
}());
exports.Resource$Projects$Zones$Operations = Resource$Projects$Zones$Operations;
//# sourceMappingURL=v1beta1.js.map
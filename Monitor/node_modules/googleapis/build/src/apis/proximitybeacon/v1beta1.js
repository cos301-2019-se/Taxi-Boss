"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Proximity Beacon API
 *
 * Registers, manages, indexes, and searches beacons.
 *
 * @example
 * const google = require('googleapis');
 * const proximitybeacon = google.proximitybeacon('v1beta1');
 *
 * @namespace proximitybeacon
 * @type {Function}
 * @version v1beta1
 * @variation v1beta1
 * @param {object=} options Options for Proximitybeacon
 */
var Proximitybeacon = /** @class */ (function () {
    function Proximitybeacon(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.beaconinfo = new Resource$Beaconinfo(this);
        this.beacons = new Resource$Beacons(this);
        this.namespaces = new Resource$Namespaces(this);
        this.v1beta1 = new Resource$V1beta1(this);
    }
    Proximitybeacon.prototype.getRoot = function () {
        return this.root;
    };
    return Proximitybeacon;
}());
exports.Proximitybeacon = Proximitybeacon;
var Resource$Beaconinfo = /** @class */ (function () {
    function Resource$Beaconinfo(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Beaconinfo.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Beaconinfo.prototype.getforobserved = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/beaconinfo:getforobserved')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Beaconinfo;
}());
exports.Resource$Beaconinfo = Resource$Beaconinfo;
var Resource$Beacons = /** @class */ (function () {
    function Resource$Beacons(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.attachments = new Resource$Beacons$Attachments(root);
        this.diagnostics = new Resource$Beacons$Diagnostics(root);
    }
    Resource$Beacons.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Beacons.prototype.activate = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{beaconName}:activate')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['beaconName'],
            pathParams: ['beaconName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Beacons.prototype.deactivate = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{beaconName}:deactivate')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['beaconName'],
            pathParams: ['beaconName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Beacons.prototype.decommission = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{beaconName}:decommission')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['beaconName'],
            pathParams: ['beaconName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Beacons.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{beaconName}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['beaconName'],
            pathParams: ['beaconName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Beacons.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{beaconName}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['beaconName'],
            pathParams: ['beaconName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Beacons.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/beacons').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Beacons.prototype.register = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/beacons:register')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Beacons.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{beaconName}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['beaconName'],
            pathParams: ['beaconName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Beacons;
}());
exports.Resource$Beacons = Resource$Beacons;
var Resource$Beacons$Attachments = /** @class */ (function () {
    function Resource$Beacons$Attachments(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Beacons$Attachments.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Beacons$Attachments.prototype.batchDelete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{beaconName}/attachments:batchDelete')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['beaconName'],
            pathParams: ['beaconName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Beacons$Attachments.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{beaconName}/attachments')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['beaconName'],
            pathParams: ['beaconName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Beacons$Attachments.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{attachmentName}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['attachmentName'],
            pathParams: ['attachmentName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Beacons$Attachments.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{beaconName}/attachments')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['beaconName'],
            pathParams: ['beaconName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Beacons$Attachments;
}());
exports.Resource$Beacons$Attachments = Resource$Beacons$Attachments;
var Resource$Beacons$Diagnostics = /** @class */ (function () {
    function Resource$Beacons$Diagnostics(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Beacons$Diagnostics.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Beacons$Diagnostics.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{beaconName}/diagnostics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['beaconName'],
            pathParams: ['beaconName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Beacons$Diagnostics;
}());
exports.Resource$Beacons$Diagnostics = Resource$Beacons$Diagnostics;
var Resource$Namespaces = /** @class */ (function () {
    function Resource$Namespaces(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Namespaces.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Namespaces.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/namespaces').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Namespaces.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/{namespaceName}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['namespaceName'],
            pathParams: ['namespaceName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Namespaces;
}());
exports.Resource$Namespaces = Resource$Namespaces;
var Resource$V1beta1 = /** @class */ (function () {
    function Resource$V1beta1(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$V1beta1.prototype.getRoot = function () {
        return this.root;
    };
    Resource$V1beta1.prototype.getEidparams = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://proximitybeacon.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta1/eidparams').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$V1beta1;
}());
exports.Resource$V1beta1 = Resource$V1beta1;
//# sourceMappingURL=v1beta1.js.map
"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Stackdriver Logging API
 *
 * Writes log entries and manages your Stackdriver Logging configuration.
 *
 * @example
 * const google = require('googleapis');
 * const logging = google.logging('v2beta1');
 *
 * @namespace logging
 * @type {Function}
 * @version v2beta1
 * @variation v2beta1
 * @param {object=} options Options for Logging
 */
var Logging = /** @class */ (function () {
    function Logging(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.billingAccounts = new Resource$Billingaccounts(this);
        this.entries = new Resource$Entries(this);
        this.monitoredResourceDescriptors =
            new Resource$Monitoredresourcedescriptors(this);
        this.organizations = new Resource$Organizations(this);
        this.projects = new Resource$Projects(this);
    }
    Logging.prototype.getRoot = function () {
        return this.root;
    };
    return Logging;
}());
exports.Logging = Logging;
var Resource$Billingaccounts = /** @class */ (function () {
    function Resource$Billingaccounts(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.logs = new Resource$Billingaccounts$Logs(root);
    }
    Resource$Billingaccounts.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Billingaccounts;
}());
exports.Resource$Billingaccounts = Resource$Billingaccounts;
var Resource$Billingaccounts$Logs = /** @class */ (function () {
    function Resource$Billingaccounts$Logs(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Billingaccounts$Logs.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Billingaccounts$Logs.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{logName}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['logName'],
            pathParams: ['logName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Billingaccounts$Logs.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{parent}/logs')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Billingaccounts$Logs;
}());
exports.Resource$Billingaccounts$Logs = Resource$Billingaccounts$Logs;
var Resource$Entries = /** @class */ (function () {
    function Resource$Entries(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Entries.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Entries.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/entries:list')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Entries.prototype.write = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/entries:write')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Entries;
}());
exports.Resource$Entries = Resource$Entries;
var Resource$Monitoredresourcedescriptors = /** @class */ (function () {
    function Resource$Monitoredresourcedescriptors(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Monitoredresourcedescriptors.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Monitoredresourcedescriptors.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/monitoredResourceDescriptors')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Monitoredresourcedescriptors;
}());
exports.Resource$Monitoredresourcedescriptors = Resource$Monitoredresourcedescriptors;
var Resource$Organizations = /** @class */ (function () {
    function Resource$Organizations(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.logs = new Resource$Organizations$Logs(root);
    }
    Resource$Organizations.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Organizations;
}());
exports.Resource$Organizations = Resource$Organizations;
var Resource$Organizations$Logs = /** @class */ (function () {
    function Resource$Organizations$Logs(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Organizations$Logs.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Organizations$Logs.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{logName}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['logName'],
            pathParams: ['logName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Organizations$Logs.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{parent}/logs')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Organizations$Logs;
}());
exports.Resource$Organizations$Logs = Resource$Organizations$Logs;
var Resource$Projects = /** @class */ (function () {
    function Resource$Projects(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.logs = new Resource$Projects$Logs(root);
        this.metrics = new Resource$Projects$Metrics(root);
        this.sinks = new Resource$Projects$Sinks(root);
    }
    Resource$Projects.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Projects;
}());
exports.Resource$Projects = Resource$Projects;
var Resource$Projects$Logs = /** @class */ (function () {
    function Resource$Projects$Logs(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Logs.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Logs.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{logName}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['logName'],
            pathParams: ['logName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Logs.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{parent}/logs')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Logs;
}());
exports.Resource$Projects$Logs = Resource$Projects$Logs;
var Resource$Projects$Metrics = /** @class */ (function () {
    function Resource$Projects$Metrics(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Metrics.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Metrics.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{parent}/metrics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Metrics.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{metricName}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['metricName'],
            pathParams: ['metricName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Metrics.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{metricName}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['metricName'],
            pathParams: ['metricName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Metrics.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{parent}/metrics')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Metrics.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{metricName}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['metricName'],
            pathParams: ['metricName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Metrics;
}());
exports.Resource$Projects$Metrics = Resource$Projects$Metrics;
var Resource$Projects$Sinks = /** @class */ (function () {
    function Resource$Projects$Sinks(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Projects$Sinks.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Projects$Sinks.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{parent}/sinks')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Sinks.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{sinkName}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['sinkName'],
            pathParams: ['sinkName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Sinks.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{sinkName}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['sinkName'],
            pathParams: ['sinkName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Sinks.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{parent}/sinks')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Projects$Sinks.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v2beta1/{sinkName}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['sinkName'],
            pathParams: ['sinkName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Projects$Sinks;
}());
exports.Resource$Projects$Sinks = Resource$Projects$Sinks;
//# sourceMappingURL=v2beta1.js.map
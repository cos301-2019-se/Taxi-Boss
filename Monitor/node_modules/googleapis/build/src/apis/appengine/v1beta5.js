"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * App Engine Admin API
 *
 * The App Engine Admin API enables developers to provision and manage their App
 * Engine applications.
 *
 * @example
 * const google = require('googleapis');
 * const appengine = google.appengine('v1beta5');
 *
 * @namespace appengine
 * @type {Function}
 * @version v1beta5
 * @variation v1beta5
 * @param {object=} options Options for Appengine
 */
var Appengine = /** @class */ (function () {
    function Appengine(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.apps = new Resource$Apps(this);
    }
    Appengine.prototype.getRoot = function () {
        return this.root;
    };
    return Appengine;
}());
exports.Appengine = Appengine;
var Resource$Apps = /** @class */ (function () {
    function Resource$Apps(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.locations = new Resource$Apps$Locations(root);
        this.operations = new Resource$Apps$Operations(root);
        this.services = new Resource$Apps$Services(root);
    }
    Resource$Apps.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Apps.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta5/apps').replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta5/apps/{appsId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['appsId'],
            pathParams: ['appsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta5/apps/{appsId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['appsId'],
            pathParams: ['appsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Apps;
}());
exports.Resource$Apps = Resource$Apps;
var Resource$Apps$Locations = /** @class */ (function () {
    function Resource$Apps$Locations(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Apps$Locations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Apps$Locations.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta5/apps/{appsId}/locations/{locationsId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['appsId', 'locationsId'],
            pathParams: ['appsId', 'locationsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps$Locations.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta5/apps/{appsId}/locations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['appsId'],
            pathParams: ['appsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Apps$Locations;
}());
exports.Resource$Apps$Locations = Resource$Apps$Locations;
var Resource$Apps$Operations = /** @class */ (function () {
    function Resource$Apps$Operations(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Apps$Operations.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Apps$Operations.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta5/apps/{appsId}/operations/{operationsId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['appsId', 'operationsId'],
            pathParams: ['appsId', 'operationsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps$Operations.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta5/apps/{appsId}/operations')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['appsId'],
            pathParams: ['appsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Apps$Operations;
}());
exports.Resource$Apps$Operations = Resource$Apps$Operations;
var Resource$Apps$Services = /** @class */ (function () {
    function Resource$Apps$Services(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.versions = new Resource$Apps$Services$Versions(root);
    }
    Resource$Apps$Services.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Apps$Services.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['appsId', 'servicesId'],
            pathParams: ['appsId', 'servicesId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps$Services.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['appsId', 'servicesId'],
            pathParams: ['appsId', 'servicesId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps$Services.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta5/apps/{appsId}/services')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['appsId'],
            pathParams: ['appsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps$Services.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['appsId', 'servicesId'],
            pathParams: ['appsId', 'servicesId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Apps$Services;
}());
exports.Resource$Apps$Services = Resource$Apps$Services;
var Resource$Apps$Services$Versions = /** @class */ (function () {
    function Resource$Apps$Services$Versions(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.instances = new Resource$Apps$Services$Versions$Instances(root);
    }
    Resource$Apps$Services$Versions.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Apps$Services$Versions.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta5/apps/{appsId}/services/{servicesId}/versions')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['appsId', 'servicesId'],
            pathParams: ['appsId', 'servicesId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps$Services$Versions.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['appsId', 'servicesId', 'versionsId'],
            pathParams: ['appsId', 'servicesId', 'versionsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps$Services$Versions.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['appsId', 'servicesId', 'versionsId'],
            pathParams: ['appsId', 'servicesId', 'versionsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps$Services$Versions.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta5/apps/{appsId}/services/{servicesId}/versions')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['appsId', 'servicesId'],
            pathParams: ['appsId', 'servicesId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps$Services$Versions.prototype.patch = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'PATCH'
            }, options),
            params: params,
            requiredParams: ['appsId', 'servicesId', 'versionsId'],
            pathParams: ['appsId', 'servicesId', 'versionsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Apps$Services$Versions;
}());
exports.Resource$Apps$Services$Versions = Resource$Apps$Services$Versions;
var Resource$Apps$Services$Versions$Instances = /** @class */ (function () {
    function Resource$Apps$Services$Versions$Instances(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Apps$Services$Versions$Instances.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Apps$Services$Versions$Instances.prototype.debug = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],
            pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps$Services$Versions$Instances.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],
            pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps$Services$Versions$Instances.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],
            pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Apps$Services$Versions$Instances.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl +
                    '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['appsId', 'servicesId', 'versionsId'],
            pathParams: ['appsId', 'servicesId', 'versionsId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Apps$Services$Versions$Instances;
}());
exports.Resource$Apps$Services$Versions$Instances = Resource$Apps$Services$Versions$Instances;
//# sourceMappingURL=v1beta5.js.map
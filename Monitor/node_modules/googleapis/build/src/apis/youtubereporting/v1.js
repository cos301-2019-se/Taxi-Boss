"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * YouTube Reporting API
 *
 * Schedules reporting jobs containing your YouTube Analytics data and downloads
 * the resulting bulk data reports in the form of CSV files.
 *
 * @example
 * const google = require('googleapis');
 * const youtubereporting = google.youtubereporting('v1');
 *
 * @namespace youtubereporting
 * @type {Function}
 * @version v1
 * @variation v1
 * @param {object=} options Options for Youtubereporting
 */
var Youtubereporting = /** @class */ (function () {
    function Youtubereporting(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.jobs = new Resource$Jobs(this);
        this.media = new Resource$Media(this);
        this.reportTypes = new Resource$Reporttypes(this);
    }
    Youtubereporting.prototype.getRoot = function () {
        return this.root;
    };
    return Youtubereporting;
}());
exports.Youtubereporting = Youtubereporting;
var Resource$Jobs = /** @class */ (function () {
    function Resource$Jobs(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.reports = new Resource$Jobs$Reports(root);
    }
    Resource$Jobs.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Jobs.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/jobs').replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Jobs.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/jobs/{jobId}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['jobId'],
            pathParams: ['jobId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Jobs.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/jobs/{jobId}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['jobId'],
            pathParams: ['jobId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Jobs.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/jobs').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Jobs;
}());
exports.Resource$Jobs = Resource$Jobs;
var Resource$Jobs$Reports = /** @class */ (function () {
    function Resource$Jobs$Reports(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Jobs$Reports.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Jobs$Reports.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/jobs/{jobId}/reports/{reportId}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['jobId', 'reportId'],
            pathParams: ['jobId', 'reportId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Jobs$Reports.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/jobs/{jobId}/reports')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['jobId'],
            pathParams: ['jobId'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Jobs$Reports;
}());
exports.Resource$Jobs$Reports = Resource$Jobs$Reports;
var Resource$Media = /** @class */ (function () {
    function Resource$Media(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Media.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Media.prototype.download = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/media/{resourceName}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['resourceName'],
            pathParams: ['resourceName'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Media;
}());
exports.Resource$Media = Resource$Media;
var Resource$Reporttypes = /** @class */ (function () {
    function Resource$Reporttypes(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Reporttypes.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Reporttypes.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/reportTypes').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Reporttypes;
}());
exports.Resource$Reporttypes = Resource$Reporttypes;
//# sourceMappingURL=v1.js.map